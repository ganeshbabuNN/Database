OVERLOADING PROCEDURES
====================

-this can be done inside the packages 
-overloading procedures with the same name with two or more different parameters
-we shall work on only on the three recrods

select first_name,hire_date,salary
from hr.employees
where rownum <=3;

--converting all the column into string

select first_name,to_char(hire_date,'DD/MM/YYYY'),to_char(salary)
from hr.employees
where rownum <=3;


Reading the data from the table and put into a file as CSV
----------------------------------------------------------
write_ugly_emp.sql

CREATE OR REPLACE PROCEDURE write_employees2 AS
  CURSOR c1 IS 
     SELECT first_name, 
            hire_date hire_date, 
            salary salary
       FROM hr.employees
       WHERE rownum <= 3;
       
  v_fh UTL_FILE.file_type;
  v_string VARCHAR2(32000);
  
BEGIN

  v_fh := UTL_FILE.fopen('FILE_DIR', 'emps2.txt', 'w', 32000);
  
  FOR ci IN c1 
  LOOP
    v_string := v_string || '"' || ci.first_name || '",';  
    v_string := v_string || to_char(ci.hire_date, 'DD/MM/YYYY') || ',';  
    v_string := v_string || to_char(ci.salary);  
    UTL_FILE.put_line( v_fh, v_string );
    v_string := NULL;
  END LOOP;
  
  UTL_FILE.fclose( v_fh );
  
END;
/

---if you really do not know the datatype , where you are writing into a file , for this create a procedures of the package
--you can use the overloaded functions to do this , coz you do not know the data type.
strnger_pkg1.sql
CREATE OR REPLACE PACKAGE stringer AS

  FUNCTION stringify(p_field IN VARCHAR2) RETURN VARCHAR2;
  FUNCTION stringify(p_field IN NUMBER) RETURN VARCHAR2;
  FUNCTION stringify(p_field IN DATE) RETURN VARCHAR2;

END;
/


CREATE OR REPLACE PACKAGE BODY stringer AS

  FUNCTION stringify(p_field IN VARCHAR2) RETURN VARCHAR2
  IS 
  BEGIN
    RETURN p_field;
  END;
  
  FUNCTION stringify(p_field IN NUMBER) RETURN VARCHAR2
  IS
  BEGIN
    RETURN to_char(p_field);
  END;
  
  FUNCTION stringify(p_field IN DATE) RETURN VARCHAR2
  IS
  BEGIN
    RETURN to_char(p_field, 'DD/MM/YYYY');
  END;

END; 
/

---now you can call with the stringify procedures
write_less_ugly_emps.sql
CREATE OR REPLACE PROCEDURE write_employees3 AS
  CURSOR c1 IS 
     SELECT first_name, 
            hire_date hire_date, 
            salary salary
       FROM hr.employees
       WHERE rownum <= 3;
       
  v_fh UTL_FILE.file_type;
  v_string VARCHAR2(32000);
  
BEGIN

  v_fh := UTL_FILE.fopen('FILE_DIR', 'emps3.txt', 'w', 32000);
  
  FOR ci IN c1 
  LOOP
    v_string := v_string || '"' || stringer.stringify(ci.first_name)  || '",';  
    v_string := v_string || stringer.stringify(ci.hire_date) || ',';  
    v_string := v_string || stringer.stringify(ci.salary);  
    UTL_FILE.put_line( v_fh, v_string );
    v_string := NULL;
  END LOOP;
  
  UTL_FILE.fclose( v_fh );
  
END; 
/
if you want to convert the procedures for converting to CSV
-----------------------------------------------------------
string_pkg2.sql

CREATE OR REPLACE PACKAGE stringer AS

  PROCEDURE set_format_mask( p_format_mask IN VARCHAR2 );

  FUNCTION stringify(p_field IN VARCHAR2) RETURN VARCHAR2;
  FUNCTION stringify(p_field IN NUMBER) RETURN VARCHAR2;
  FUNCTION stringify(p_field IN DATE) RETURN VARCHAR2;

  FUNCTION stringify_csv(p_field IN VARCHAR2) RETURN VARCHAR2;
  FUNCTION stringify_csv(p_field IN NUMBER) RETURN VARCHAR2;
  FUNCTION stringify_csv(p_field IN DATE) RETURN VARCHAR2;

END; 
/

CREATE OR REPLACE PACKAGE BODY stringer AS

  g_format_mask VARCHAR2(32000) := 'DD/MM/YYYY';
  PROCEDURE set_format_mask( p_format_mask IN VARCHAR2 )
  IS
  BEGIN
    g_format_mask := p_format_mask;
  END;
  
  FUNCTION stringify(p_field IN VARCHAR2) RETURN VARCHAR2
  IS 
  BEGIN
    RETURN p_field;
  END;
  
  FUNCTION stringify(p_field IN NUMBER) RETURN VARCHAR2
  IS
  BEGIN
    RETURN to_char(p_field);
  END;
  
  FUNCTION stringify(p_field IN DATE) RETURN VARCHAR2
  IS
  BEGIN
    RETURN to_char(p_field, g_format_mask);
  END;

  FUNCTION stringify_csv(p_field IN VARCHAR2) RETURN VARCHAR2
  IS 
  BEGIN
    RETURN '"' || stringify(p_field) || '",';
  END;
  
  FUNCTION stringify_csv(p_field IN NUMBER) RETURN VARCHAR2
  IS
  BEGIN
    RETURN stringify(p_field) || ',';
  END;
  
  FUNCTION stringify_csv(p_field IN DATE) RETURN VARCHAR2
  IS
  BEGIN
    RETURN stringify(p_field) || ',';
  END;
END; 
/

--now call the procedures
write_pretty_emps.sql
CREATE OR REPLACE PROCEDURE write_employees4 AS
  CURSOR c1 IS 
     SELECT first_name, 
            hire_date hire_date, 
            salary salary
       FROM hr.employees
       WHERE rownum <= 3;
       
  v_fh UTL_FILE.file_type;
  v_string VARCHAR2(32000);
  
BEGIN

  v_fh := UTL_FILE.fopen('FILE_DIR', 'emps4.txt', 'w', 32000);
  
  stringer.set_format_mask('DD/MM/YYYY');
  
  FOR ci IN c1 
  LOOP
    v_string := v_string || stringer.stringify_csv(ci.first_name);  
    v_string := v_string || stringer.stringify_csv(ci.hire_date);  
    v_string := v_string || stringer.stringify_csv(ci.salary);  
    UTL_FILE.put_line( v_fh, v_string );
    v_string := NULL;
  END LOOP;

  UTL_FILE.fclose( v_fh );
  
END; 
/

---now converting to the formatted 
write_pretty_emps.sql
CREATE OR REPLACE PROCEDURE write_employees4 AS
  CURSOR c1 IS 
     SELECT first_name, 
            hire_date hire_date, 
            salary salary
       FROM hr.employees
       WHERE rownum <= 3;
       
  v_fh UTL_FILE.file_type;
  v_string VARCHAR2(32000);
  
BEGIN

  v_fh := UTL_FILE.fopen('FILE_DIR', 'emps4.txt', 'w', 32000);
  
  stringer.set_format_mask('DD/MM/YYYY');
  
  FOR ci IN c1 
  LOOP
    v_string := v_string || stringer.stringify_csv(ci.first_name);  
    v_string := v_string || stringer.stringify_csv(ci.hire_date);  
    v_string := v_string || stringer.stringify_csv(ci.salary);  
    UTL_FILE.put_line( v_fh, v_string );
    v_string := NULL;
  END LOOP;

  UTL_FILE.fclose( v_fh );
  
END; 
/











