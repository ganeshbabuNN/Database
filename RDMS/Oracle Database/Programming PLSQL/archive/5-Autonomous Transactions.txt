Transactions
==============

-It is a advanced Topic


--Now Create a Log table
create log_table.sql
CREATE TABLE LOG_TABLE
  (
    DATE_AND_TIME DATE,
    MESSAGE VARCHAR2(100 BYTE)
 ) ;
 
--just to check the insert statement is working are not
insert into log_table.sql
insert into log_table values(sysdate,'Hello');

--changing the logit with parameter.sql to the parameter
logit with insert.sql

create or replace PROCEDURE logit(
  v_message IN VARCHAR2 DEFAULT 'Hello World!')
AS
  v_date DATE := SYSDATE;
BEGIN
/*
  DBMS_OUTPUT.put_line(
        v_message ||
        ' The date and time is ' ||
        to_char(v_date, 'Day') || ' on ' ||
        to_char(v_date, 'FMDD Month, YYYY') ||
        ' @ ' ||
        to_char(v_date, 'HH24:MI:SS')
        );
*/

  insert into log_table
    (date_and_time, message)
    VALUES (v_date, v_message);

END;
/


---now run the nested procedure calls and check the table.
--next is to try to rollback the code, you may see the recent values is not avaiable in the log table
nested logit calls.sql
BEGIN
  logit;
  logit(2);
  BEGIN
    logit( 'Hello again!');
    DECLARE
      v_a_different_msg VARCHAR2(100);
    BEGIN
      v_a_different_msg := 'Where am I?';
      logit( v_a_different_msg );
    END;
  END;
END;
/

ISSUE COMMIT
============
-- to issue commit

logit with commit.sql

create or replace
PROCEDURE logit(
  v_message IN VARCHAR2 DEFAULT 'Hello World!')
AS
  v_date DATE := SYSDATE;
BEGIN
/*
  DBMS_OUTPUT.put_line(
        v_message ||
        ' The date and time is ' ||
        to_char(v_date, 'Day') || ' on ' ||
        to_char(v_date, 'FMDD Month, YYYY') ||
        ' @ ' ||
        to_char(v_date, 'HH24:MI:SS')
        );
*/

  insert into log_table
    (date_and_time, message)
    VALUES (v_date, v_message);

  COMMIT;
END;
/

AUTONOMOUS TRANSACTION
=======================
--oracle introduces the features called the autonomous transactions
--we can instruct the compiler be a statement called the pragma
--A pragram is just message to the compiler,where that specfic procedures starts a new independent transactions
--when this procedures is called started new transactions off by itself where it can commit,rollback expect that procedures
--when you do the automonoous transaction, you have to commit or rollback

logit autonomous transaction.sql

create or replace
PROCEDURE logit(
  v_message IN VARCHAR2 DEFAULT 'Hello World!')
AS
  PRAGMA AUTONOMOUS_TRANSACTION;
  v_date DATE := SYSDATE;
BEGIN
/*
  DBMS_OUTPUT.put_line(
        v_message ||
        ' The date and time is ' ||
        to_char(v_date, 'Day') || ' on ' ||
        to_char(v_date, 'FMDD Month, YYYY') ||
        ' @ ' ||
        to_char(v_date, 'HH24:MI:SS')
        );
*/

  insert into log_table
    (date_and_time, message)
    VALUES (v_date, v_message);

  COMMIT;

END;
/

--- now call the logit procedures with ROLLBACK
-check the table and click on rollback , check if the data is rolling back.

call logit with rollback.sql
BEGIN
  logit;
  logit(2);
  BEGIN
    logit( 'Hello again!');
    DECLARE
      v_a_different_msg VARCHAR2(100);
    BEGIN
      rollback; -- Notice the rollback
      v_a_different_msg := 'Where am I?';
      logit( v_a_different_msg );
    END;
  END;
END;
/

--summary its something like you need to actions and you don't want to impact transaction going into the applications





