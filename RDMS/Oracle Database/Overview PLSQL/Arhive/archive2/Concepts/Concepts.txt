Conceptual Overview 
====================


Difference between SQL and PLSQL
--------------------------------
- this both is used in the databases or withing databases morever access the data in the databases.
- SQL is a set based langauges,

example 
select * from emp_table.
-you say this return all the rows in the emp_table, where you say , this is what i want.
update emp_table
set name='Ganesh'
where last= 'babu';
- just saying i want to the update the name ganesh from the emp_table, just like identify the set of rows where last ='Babu'and then update ganesh to it. just by row by row. this usually like a set based programming

In PLSQL
--------
- you want to say how to do, how you will apply like row by row, assing some value.

Loop
exit when v_num <1;
call proc();

if v_var='ABC' then
 call another_proc()
end if;

end;

--you but some looping some condition with some loops like..
--its almost same like some languages like
Pascal

program helloworld;
begin
 write('hello world');
end;


ADA.
with ada.Text_IO;
use ada.TEXT_IO;
procedure Hello is
begin
 put_line("hello world");
end hello;

java

class helloworldapp{
   public static void main(string[] args) {
	System.out.printlin("Hello world");
}	
}

IN PLSQL
- its a block structures language.
- it is based on ADA but ADA is similar to PASCAL.

begin
   dbms_output.put_line("Hello world");
end;

some of the features where SQL do not provide
---------------------------------------------
it is procedural language where SQL cannot do
-you can call out the external webservice and pull back the data.
-you can write the text files
-you can send email
-the big difference between SQL and PLSQL , PLSQL is designed from the ground to interact with SQL Databases
-you can handle exceptions in PLSQL not in SQL.


ORacle Website look
===================

www.oracle.com/

Installing the Oracle Database
=============================

--you can use Oracle XE Database which is free.



BLOCK STRUTURE
==============

-PLSQL is the Block struture oriented language
-You can have nested block struture language

begin
   dbms_output.put_line('Hello world');
end;

-it basic struture is following by sections and below is the PLSQL unit.
-contain all the different block.

DECLARE
// declaring the variable can be using for using procedures ,functions, packages,triggers.
// use to declare the variable of its types
// this session is completely optionals.
--  v_var varchar2(10);
  v_var varchar2(10) = "Hello world";

BEGIN
//this is the executable session
--dbms_output.put_line('Hello world');
dbms_output.put_line(v_var);

EXCEPTION
// this session is completely optionals.
 when no_data_found THEN 
  null;
end;

END;

Procedures
==========
-Procedures is something just do it, of whatever i say or take an actions like inserting,delete..etc record.
-Begin section is always requried for any procedures, trigger,functions etc 
-Procedures are workcourse of the coding world
-it does not return any values.
-it cannot be called by SQL.
-it does contain any expression and assign using a variable, its a standalone

Simpliest procedures

create or replace procedure does_something
as
begin
  null;
end;

Functions
=========
-Functions is always return a value it may be number or a string or something that will return.
-its always smaller and contains pieces of the code.
-Functions can be called from SQL where as the Procedures cannot
-Functions can be expression but procedures not

simpliest function

create or replace function get_something
return number
as
begin
 return 1;
end;

--displaying the output for the screen using AB
begin
  dbms_output.put_line(get_something);
end;


Packages
========
-its just like a container,
-its holder for procedures and functions that we are using. as we created procedures and functions standalone where you can put into one container called packages or library or API or container
- it contain a spec and body
- when you call any procedures and function from the package, 
	[Package_name].[procedures/function name].

syntax
--specification
create or replace package my_package
as
 function get_something
 return number;

 procedure do_something;
end;
/

--implementation of the spec is a body
create or replace package body my_package
as
function get_something
return number
as
begin
 return 1;
end;
procedure do_something
as
begin
 insert into log_table(date_time,msg) values(sysdate,'this is a message');
end;
end;
/

---call that procedures and functions
begin
  my_package.do_something;
  dbms_output.put_line(my_package.get_something);
end;
/

TRIGGER
=======
-A trigger is a event driven kind of thing,
-when you create a trigger sort of procedure assign to an object or event or really to a event or an object.
-basically like insert into a table for auditing, logging and executes whatever code you have

PLSQL Data Type
===============
- it is a simplest type avaiable in other language like
-some of them are
1)VARCHAR2
2)DATE
3)NUMBER
4)BOOLEAN
5)CHAR
-there are some complex data type which can be done through scalar types for normal operations.

for example take as user form
-----------------------------

Name : _____________
Age : ______________
Date of Birth : ______________


1)STRING
VARCHAR2
-its alphanumeric or string data type.
-its variable character string which uses actual content of value apart of the fixed value.
ex
-ganesh
-babu
-ganesh !
-ganesh233
CHAR
-fixed size 


2)DATE
-01-JAN-2011
-03/03/1987 12:22:33 AM.
-01-01-2010 00:00:00
TIMESTAMP
-03/03/1987 12:21:33:0033232 AM
-Timezones

3)NUMBER
- 1
-1020338.555
PLS_INTEGER and BINARY_INTEGER for oracle and performance oriented
-1,-50m, 0 morever used for counters,loops
BINARY_FLOAT and BINARY_DOUBLE
-Efficient Floating Point Number

4)BOOLEAN
-TRUE/FALSE
- 1=10 ( boolean expression ) returns false 
-Understand there is nothing specifically to create the boolean data type in a table of that column , like creating TRUE or FALSE. it is used for the evaluations purpose only

COMPLEX DATA STRUCTURES
=======================

RECORD TYPE
------------
- its a simple type 
-it takes the multiple scalar type like varchar2,char,...
- when you declare any complex data type, you have to declare has a TYPE.

TYPE r_person is RECORD (
 fname varchar2(20),
 lname varchar2(30),
 age NUMBER);

ASSOCIATIVE ARRAY
-----------------
-A array is a way to store multiple variables in a collections,so its a set of data or collection of elements
-PLSQL is also allows to create the array of records


ARRAY OF RECORD /NESTED TABLE / VARRAY/OBJECT
---------------------------------------------
- its basically a array of record
-very much nested table and varray is an oracle object, well collection of objects is like a nested table.
-objects is itself like a record.
-when you declare as a object, i declare at the database level. this will exist in the database dictionary like procedures,functions...like that. since oracle is a object relational database.
-IN a simplest form is object is like a record .
-the main difference between record and the object ,object is like a database object you can create a table using the object where the record in a table level avaiable tempervaliy.
-we can use the collection of objects.


Varibles/constants/parameters
=============================

Variables
---------
-A variables ,constants and parameters is locations and memory where stores a values where the program can use.
-an example, a counter keep tracke of location where it is used.
-there are two types of variable
1) local variable
2) global variable

Constants
---------
-A constant is a special class of variables which says you never change the values, you initilize once and set for the life of that program unit.
-set once and cannot changed.

Parameter
---------
-Like a variable, A parameter is a place to store the in memory something you are going to use.
-now a way is different it interacts with two procedures or two blocks , so either calling procedure calling a procedures or anyonmous block calling a functions or whatever .- 
-A calling procedure is one calling the second procedures and passes the parameter so parameter uses it
-it has three MODE.
--By default the parameter is a IN Mode type, its like a constant , a variable comes in like just reference it, but you cannot change what i passed in
--another is IN OUT , when it is coming in , reference it whereever you want , and change it and return the change value out of the procedure
--OUT MODE ,you set the value out and get an error. this is a special case, where you guarentiee the out is coming NULL and but you can set the value when you return it out.


FLOW CONTROL BASIC
==================

PLSQL provides three basic way of control the flow of the statement
- IF 
- Simple CASE 
- Search CASE
-LOOP
-FOR LOOP
-WHILE LOOP


IF
--

syntax

if <expression> then
 do code
ELSEIF <expression then
do code
ELSEIF <expression then
do code
ELSE
do code
END IF;

CASE
----
-a simple case, search for the specific value and return the message you want , its like a nested else if
-where as a search case, it search for the whole value of that searched case, then return output as you desire.

LOOP
----
- it loops if you don't have a conditions it loops for ever
-put a EXIT , that will be unconditional exit

FOR LOOP
-------
-baiscally intializes the counter ,increment the counter and exit until not the conditon true.

WHILE LOOP
---------
-in while loop you tell what you want to loop and also include the exit criteria even before you start the loop.


ERROR and EXCEPTION
====================
-when program are running we may experience expected and unexcpected errors , if the expection is expected we try to handle it and continue to process and if the expection is unexpected and we have to decide do we want to continue for processing ,try to hanlde the specific excpetion ,and end processing or call some special procedures 
-in PLSQL , we handle expection using exception handler
-Remeber exception block is the main component in the programming unit,its a optional but it is a major component 
-there are lot of builtin exception ,codes avaiable where you exception can be handled.
-- you can find all the built-in exception in this packages.

--list of all exception in Database
select text
from dba_source
where name='STANDARD';

- you can raise the exception and handle it immdiately or later
- you can create your own custom exception using RAISE_APPLICATION_ERROR and handle those exception using "other" keyword.


COMMENTS
========
--commenting a code
-there are two ways to do the comments

single line comment
--------------------
-this can be put anywhere in the program unit or block. starting with double hypen
   --calling something

multiline comment
-----------------
--this just like documenttion multi line way
--this is very easy for document like a paragraph. it starts with single forward slash with Astriek. it is basically for the larget comment box.
-- dont'try to nest the comment 
  /*
     Author : ganesh
     status : draft
     options: nothing	
	
   */
   


