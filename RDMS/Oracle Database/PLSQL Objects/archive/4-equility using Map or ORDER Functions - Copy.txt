COMPARE the objects with quality and comparison sessions
--------------------------------------------------------

--in real world , comparing the objects will bit complex apart from the straight comparison with equality of scalar values like number to number, String to String, letter to letter
--let us show some example which does not work..

call_emp_obj6.sql
DECLARE  
  v_emp_obj emp_obj;
  v_emp_obj2 emp_obj;
BEGIN

  v_emp_obj := emp_obj(
    last_name => 'ganesh',
    first_name => 'babu',
    email => 'ganesh@gmail.com',
    phone_number => '9663895384',
    hire_date => sysdate,
    salary => 5000);
	
  v_emp_obj2 := emp_obj(
    last_name => 'ganesh',
    first_name => 'babu',
    email => 'ganesh@yahoo.com',
    phone_number => '9663895384',
    hire_date => SYSDATE,
    salary => 3000);

  IF v_emp_obj = v_emp_obj2
  THEN
    DBMS_OUTPUT.PUT_LINE('equality');
  ELSE
    DBMS_OUTPUT.PUT_LINE('inequality');
  END IF;  
END; 
/

the above code has some error"ORA-06550: line 22, column 16:
PLS-00526: A MAP or ORDER function is required for comparing objects in PL/SQL.
06550. 00000 -  "line %s, column %s:\n%s"
*Cause:    Usually a PL/SQL compilation error."

Anyway for comparing objects, we need to MAP or ORDER FUnction in PLSQL.

MAP MEMBER
-----------
---MAP MEMBER function is a simplest type of functions and map returns the scalar value when try to compare and the return compared result must be a valid sql data type like boolean, string ,number ...etc
---rewriting the above code using MAP ME 

CREATE OR REPLACE TYPE emp_obj
AS OBJECT 
(
  last_name VARCHAR2(25),
  first_name VARCHAR2(20),
  email VARCHAR2(25),
  phone_number VARCHAR2(20),
  hire_date DATE,
  salary NUMBER(8,2),
  
  MAP MEMBER FUNCTION comp
    RETURN NUMBER,
    
  MEMBER PROCEDURE print,
  
  MEMBER FUNCTION bonus(
    p_percent IN NUMBER )
    RETURN NUMBER,
  
  CONSTRUCTOR FUNCTION emp_obj
    RETURN SELF AS RESULT,
    
  CONSTRUCTOR FUNCTION emp_obj(
    email IN VARCHAR2 )      
    RETURN SELF AS RESULT
)  
NOT FINAL 
/

create or replace
TYPE BODY emp_obj
AS 

  MAP MEMBER FUNCTION comp
    RETURN NUMBER
  AS
  BEGIN
    RETURN dbms_utility.get_hash_value( 
       name => SELF.last_name || SELF.email || to_char(SELF.salary),
       base => 1000,
       hash_size => 4000);
  END;
  
  MEMBER FUNCTION bonus(
    p_percent IN NUMBER )
    RETURN NUMBER
  AS
  BEGIN
    RETURN SELF.salary * p_percent;
  END;
  
  MEMBER PROCEDURE print
  IS
  BEGIN
    DBMS_OUTPUT.PUT_LINE('Last Name: ' || SELF.last_name);
    DBMS_OUTPUT.PUT_LINE('Email: ' || SELF.email);
    DBMS_OUTPUT.PUT_LINE('Salary: ' || TO_CHAR(SELF.salary));
  END;
    
  CONSTRUCTOR FUNCTION emp_obj
    RETURN SELF AS RESULT
  IS
  BEGIN
    SELF.salary := 0;
    RETURN;
  END;  
  
  CONSTRUCTOR FUNCTION emp_obj(
    email IN VARCHAR2 )      
    RETURN SELF AS RESULT
  IS
  BEGIN
    SELF.email := email;
    
    RETURN;
  END;
END;
/
****and now call the  MAP MEMBER FUnction to check how the objects is compared
--Now call call_emp_obj6.sql and check the output. 
--match the attributes of the objects and check the output.

ORDER MEMBER FUNCTIONS
--------------------
--ORDER Function can be used , since it passes one instance of one object to another instance object which gives the uniqness --it always return 1(it means greater then the other) ,0(mean equal to other) and -1(less then the other)
let take one example
CREATE OR REPLACE TYPE emp_obj
AS OBJECT 
(
  last_name VARCHAR2(25),
  first_name VARCHAR2(20),
  email VARCHAR2(25),
  phone_number VARCHAR2(20),
  hire_date DATE,
  salary NUMBER(8,2),
  
  ORDER MEMBER FUNCTION comp( 
       p_emp_obj IN emp_obj )
    RETURN NUMBER,
    
  MEMBER PROCEDURE print,
  
  MEMBER FUNCTION bonus(
    p_percent IN NUMBER )
    RETURN NUMBER,
  
  CONSTRUCTOR FUNCTION emp_obj
    RETURN SELF AS RESULT,
    
  CONSTRUCTOR FUNCTION emp_obj(
    email IN VARCHAR2 )      
    RETURN SELF AS RESULT
)  
NOT FINAL 
/

create or replace
TYPE BODY emp_obj
AS 

  ORDER MEMBER FUNCTION comp( 
       p_emp_obj IN emp_obj )
    RETURN NUMBER
  AS
  BEGIN
    IF SELF.last_name = p_emp_obj.last_name 
       AND SELF.email = p_emp_obj.email
       AND SELF.salary = p_emp_obj.salary
    THEN
      RETURN 0;
    ELSIF (SELF.last_name = p_emp_obj.last_name 
       AND SELF.email = p_emp_obj.email)
       AND SELF.salary != p_emp_obj.salary
    THEN 
      RETURN 1;
    ELSE
      RETURN -1;
    END IF;
  END;
  
  MEMBER FUNCTION bonus(
    p_percent IN NUMBER )
    RETURN NUMBER
  AS
  BEGIN
    RETURN SELF.salary * p_percent;
  END;
  
  MEMBER PROCEDURE print
  IS
  BEGIN
    DBMS_OUTPUT.PUT_LINE('Last Name: ' || SELF.last_name);
    DBMS_OUTPUT.PUT_LINE('Email: ' || SELF.email);
    DBMS_OUTPUT.PUT_LINE('Salary: ' || TO_CHAR(SELF.salary));
  END;
    
  CONSTRUCTOR FUNCTION emp_obj
    RETURN SELF AS RESULT
  IS
  BEGIN
    SELF.salary := 0;
    RETURN;
  END;  
  
  CONSTRUCTOR FUNCTION emp_obj(
    email IN VARCHAR2 )      
    RETURN SELF AS RESULT
  IS
  BEGIN
    SELF.email := email;
    
    RETURN;
  END;
END;
/
***and now call the  MAP MEMBER FUnction to check how the objects is compared
--Now call call_emp_obj7.sql and check the output. 
--match the attributes of the objects and check the output.

call_emp_obj7.sql

DECLARE  
  v_emp_obj emp_obj;
  v_emp_obj2 emp_obj;a
BEGIN

  v_emp_obj := emp_obj(
    last_name => 'ganesh',
    first_name => 'babu',
    email => 'ganesh@gmail.com',
    phone_number => '9663895384',
    hire_date => sysdate,
    salary => 5000);
	
  v_emp_obj2 := emp_obj(
    last_name => 'ganesh',
    first_name => 'babu',
    email => 'ganesh@yahoo.com',
    phone_number => '9663895384',
    hire_date => sysdate,
    salary => 3000);

  IF v_emp_obj = v_emp_obj2
  THEN
    DBMS_OUTPUT.PUT_LINE('equality');
  ELSIF v_emp_obj < v_emp_obj2
  THEN
    DBMS_OUTPUT.PUT_LINE('less than');
  ELSIF v_emp_obj > v_emp_obj2
  THEN
    DBMS_OUTPUT.PUT_LINE('greater than');
  ELSE
    DBMS_OUTPUT.PUT_LINE('else');
  END IF;  
END;  
/

--match the email and check the output
--match email and salary and check the output
