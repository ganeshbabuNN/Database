-- RAISING EXCEPTION
====================

-- Using the Raise and Raising applicaiton keyword for creating your own exceptions
-- here the below procedure, if exceptions is something other , with that excpetion code, then handle it or re raise the Exceptions And assign the value to the to that variables.

bad_abc6_builtinexception.sql
CREATE OR REPLACE PROCEDURE bad_abc
AS
  v_what NUMBER;
BEGIN
  BEGIN
    v_what := 'abc';
  EXCEPTION
    WHEN OTHERS
    THEN
      IF SQLCODE = -06502 
      THEN
        v_what := 123;
      ELSE
        RAISE;
      END IF;
  END;  
  dbms_output.put_line(v_what);
END;
/

---- if I change the sql code to some other thing and call the procedure, then check the output.
--And you can find it was unable to handle that exception has the sql code was different.
CREATE OR REPLACE PROCEDURE bad_abc
AS
  v_what NUMBER;
BEGIN
  BEGIN
    v_what := 'abc';
  EXCEPTION
    WHEN OTHERS
    THEN
      IF SQLCODE = -06503 
      THEN
        v_what := 123;
      ELSE
        RAISE;
      END IF;
  END;  
  dbms_output.put_line(v_what);
END;
/

-- Raise the value_error then Handling the code and check
--- Change the sql code with that value_error code and check
bad_abc7_raise.sql
create or replace PROCEDURE bad_abc
AS
  v_what NUMBER;
BEGIN
  BEGIN
    --v_what := 'abc';
    RAISE VALUE_ERROR;
  EXCEPTION
    WHEN OTHERS
    THEN
      IF SQLCODE = -06503
      THEN
        v_what := 123;
      ELSE
        RAISE;
      END IF;
  END;  
  dbms_output.put_line(v_what);
END;
/

--- change the code

create or replace PROCEDURE bad_abc
AS
  v_what NUMBER;
BEGIN
  BEGIN
    --v_what := 'abc';
    RAISE VALUE_ERROR;
  EXCEPTION
    WHEN OTHERS
    THEN
      IF SQLCODE = -06502
      THEN
        v_what := 123;
      ELSE
        RAISE;
      END IF;
  END;  
  dbms_output.put_line(v_what);
END;
/

--you can even handled the sql code in the raise keyword itself instead of handling using the sql code.

create or replace PROCEDURE bad_abc
AS
  v_what NUMBER;
BEGIN
  BEGIN
    --v_what := 'abc';
    RAISE -06502;
  EXCEPTION
    WHEN OTHERS
    THEN
      IF SQLCODE = -06502
      THEN
        v_what := 123;
      ELSE
        RAISE;
      END IF;
  END;  
  dbms_output.put_line(v_what);
END;
/

--This can be handled by passing value using the raise application error.

Raise Application Error
=======================
--- It is not a good pratice to hide the exception and return null. It is always a good pratice to handle exception of the exact  or using the Logit for debugging purposes.

bad_abc_8_raise_application_error_wrong.sql
create or replace PROCEDURE bad_abc
AS
  v_what NUMBER;

BEGIN
  BEGIN
    --v_what := 'abc';
    RAISE_APPLICATION_ERROR(-6503, 'Weird Error');
  EXCEPTION
    WHEN OTHERS
    THEN
      IF SQLCODE = -06503
      THEN
        v_what := 123;
      ELSE
        RAISE;
      END IF;
  END;  
  dbms_output.put_line(v_what);
END;
/

--- call the procedures
begin
  bad_abc;
end;
/

--- use the application error and handle the exceptions which is caused and handled.
bad_abc_8_raise_application_error_correct.sql
create or replace PROCEDURE bad_abc
AS
  v_what NUMBER;
BEGIN
  BEGIN
    --v_what := 'abc';
    RAISE_APPLICATION_ERROR(-20001, 'Weird Error');
  EXCEPTION
    WHEN OTHERS
    THEN
      IF SQLCODE = -20001
      THEN
        v_what := 123;
      ELSE
        RAISE;
      END IF;
  END;  
  dbms_output.put_line(v_what);
END;
/


---bad_abc9_pragma.sql
create or replace PROCEDURE bad_abc
AS
  v_what NUMBER;

  weird_error EXCEPTION;
  pragma EXCEPTION_INIT(WEIRD_ERROR, -06503);

BEGIN
  BEGIN
    --v_what := 'abc';
    RAISE VALUE_ERROR;
  EXCEPTION
    WHEN OTHERS
    THEN
      IF SQLCODE = -06503
      THEN
        v_what := 123;
      ELSE
        RAISE;
      END IF;
  END;
  
  dbms_output.put_line(v_what);
END;
/


bad_abc10.sql
create or replace PROCEDURE bad_abc
AS
  v_what NUMBER;

  weird_error EXCEPTION;
  pragma EXCEPTION_INIT(WEIRD_ERROR, -06503);
BEGIN
  BEGIN
    --v_what := 'abc';
    RAISE WEIRD_ERROR;
  EXCEPTION
    WHEN OTHERS
    THEN
      IF SQLCODE = -06503
      THEN
        v_what := 123;
      ELSE
        RAISE;
      END IF;
  END;
  dbms_output.put_line(v_what);
END;
/


bad_abc11.sql
create or replace PROCEDURE bad_abc
AS
  v_what NUMBER;
  weird_error EXCEPTION;
  pragma EXCEPTION_INIT(WEIRD_ERROR, -06503);
BEGIN
  BEGIN
    --v_what := 'abc';
    RAISE WEIRD_ERROR;
  EXCEPTION
    WHEN WEIRD_ERROR
    THEN
        v_what := 123;
  END;
  dbms_output.put_line(v_what);
END;
/

---Put Those errors in the other tables and those tables are monitoring for error purpose only.
create or replace PROCEDURE bad_abc
AS
  v_what NUMBER;
BEGIN
  BEGIN
    --v_what := 'abc';
    RAISE_APPLICATION_ERROR(-20001, 'Weird Error');
  EXCEPTION
    WHEN WEIRD_ERROR
    THEN
      logit_and_continue(sqlerm);
    END;

   dbms_output.put_line(v_what);
 
   Exception
	WHEN OTHERS
	THEN
	    logit_and_raise(sqlerrm);
	END;
END;
/

--You can package all the exception code in form of the api

my_exceptions_package.sql

CREATE OR REPLACE 
PACKAGE MY_EXCEPTIONS AS 

  weird_error EXCEPTION;
  pragma EXCEPTION_INIT(WEIRD_ERROR, -20001);

END MY_EXCEPTIONS;
/

CREATE OR REPLACE 
PACKAGE MY_EXCEPTIONS AS 

  weird_error EXCEPTION;
  pragma EXCEPTION_INIT(WEIRD_ERROR, -20001);

  strange_error EXCEPTION;
  pragma EXCEPTION_INIT(STRANGE_ERROR, -20002);

END MY_EXCEPTIONS;
/

--you can reference this package in your procedures or the AB with your ongoing exception codes in the procedures.

create or replace
PROCEDURE bad_abc
AS
  v_what NUMBER;
BEGIN
  BEGIN
    --v_what := 'abc';
    RAISE MY_EXCEPTIONS.weird_error;
  EXCEPTION
    WHEN MY_EXCEPTIONS.WEIRD_ERROR
    THEN
        v_what := 123;
  END;

  dbms_output.put_line(v_what);
EXCEPTION
  WHEN OTHERS
  THEN
    logit_and_raise(sqlerrm);
END;
/



