LOOP Constructs
================
--Here 'd' for represent the day of that date
--create a new procedures

print_business_days.sql
create or replace
PROCEDURE PRINT_BUSINESS_DAYS
  (
    P_START_DATE IN DATE 
    , P_END_DATE IN DATE 
  )
AS
  v_loop_increment NUMBER := 0;
BEGIN

  LOOP
    EXIT WHEN p_start_date + v_loop_increment > p_end_date;

    IF to_number(to_char(p_start_date + v_loop_increment, 'd'))
      IN (2,3,4,5,6)
    THEN 
      dbms_output.put_line(to_char(p_start_date + v_loop_increment, 'FMDay DD "of" Month, YYYY'));
    END IF;
    v_loop_increment := v_loop_increment + 1;
  END LOOP;
END PRINT_BUSINESS_DAYS;
/

-call the procedures

BEGIN
 PRINT_BUSINESS_DAYS(sysdate,sysdate+10);
end;

EXIT-LOOP 
=========
--its a unconditional exit
-- if the statements hits on exit it never go back, it just stops

create or replace
PROCEDURE PRINT_BUSINESS_DAYS
  (
    P_START_DATE IN DATE 
    , P_END_DATE IN DATE 
  )
AS
  v_loop_increment NUMBER := 0;
BEGIN

  LOOP
    EXIT WHEN p_start_date + v_loop_increment > p_end_date;

    IF to_number(to_char(p_start_date + v_loop_increment, 'd'))
      IN (2,3,4,5,6)
    THEN 
      dbms_output.put_line(to_char(p_start_date + v_loop_increment, 'FMDay DD "of" Month, YYYY'));
    END IF;
    EXIT;
    v_loop_increment := v_loop_increment + 1;
  END LOOP;
END PRINT_BUSINESS_DAYS;
/

CONTINUE-LOOP
=============
--instead of exiting it continues which go back from the begining and it never go to the next statements, here below which do not loop incremenents
-- this works only in Oracle 11g and this is a new features

create or replace
PROCEDURE PRINT_BUSINESS_DAYS
  (
    P_START_DATE IN DATE 
    , P_END_DATE IN DATE 
  )
AS
  v_loop_increment NUMBER := 0;
BEGIN

  LOOP
    EXIT WHEN p_start_date + v_loop_increment > p_end_date;

    IF to_number(to_char(p_start_date + v_loop_increment, 'd'))
      IN (2,3,4,5,6)
    THEN 
      dbms_output.put_line(to_char(p_start_date + v_loop_increment, 'FMDay DD "of" Month, YYYY'));
    END IF;
    CONTINUE;
    v_loop_increment := v_loop_increment + 1;
  END LOOP;
END PRINT_BUSINESS_DAYS;
/


--call the procedures
BEGIN
 PRINT_BUSINESS_DAYS(sysdate,sysdate+10);
end;

EXISTS -LOOPS
===========
---now the below scenarios , try to excluding the holidays


print_business_days with holidays.sql
create or replace PROCEDURE PRINT_BUSINESS_DAYS
  (
    P_START_DATE IN DATE 
    , P_END_DATE IN DATE 
  )
AS
  TYPE t_holidays IS TABLE OF VARCHAR2(100)
    INDEX BY VARCHAR2(30);

  v_dates t_holidays;

  v_loop_increment NUMBER := 0;

BEGIN

  v_dates('01-JAN') := 'Mew Years';
  v_dates('04-JUL') := 'Independence Day';
  v_dates('25-DEC') := 'Christmas Day';

  LOOP
    EXIT WHEN p_start_date + v_loop_increment > p_end_date;

    IF NOT v_dates.EXISTS(to_char(p_start_date + v_loop_increment, 'DD-MON'))
    THEN

      IF to_number(to_char(p_start_date + v_loop_increment, 'd'))
        IN (2,3,4,5,6)
      THEN 
        dbms_output.put_line(to_char(p_start_date + v_loop_increment, 'FMDay DD 
"of" Month, YYYY')); 
      END IF;

    END IF;

    v_loop_increment := v_loop_increment + 1;

  END LOOP;

END PRINT_BUSINESS_DAYS;
/


-call the procedures

call print_business_days.sql
begin
  print_business_days(
     to_date( '22-DEC-2012', 'DD-MON-YYYY'),
     to_date('03-JAN-2013', 'DD-MON-YYYY')
  );
end;
/

WHILE-LOOP
===========
--while this conditions is true exists
--its bit oposite to before LOOP, here keep executing unless the conditions is true.

print_business_days while loop.sql
create or replace
PROCEDURE PRINT_BUSINESS_DAYS
  (
    P_START_DATE IN DATE 
    , P_END_DATE IN DATE 
  )
AS
  v_loop_increment NUMBER := 0;
BEGIN

  WHILE p_start_date + v_loop_increment <= p_end_date
  LOOP

    IF to_number(to_char(p_start_date + v_loop_increment, 'd'))
      IN (2,3,4,5,6)
    THEN 
      dbms_output.put_line(to_char(p_start_date + v_loop_increment, 'FMDay DD "of" Month, YYYY'));
    END IF;

    v_loop_increment := v_loop_increment + 1;

  END LOOP;
END PRINT_BUSINESS_DAYS;
/

--call the procedures and check
begin
  print_business_days(
     to_date( '22-DEC-2012', 'DD-MON-YYYY'),
     to_date('03-JAN-2013', 'DD-MON-YYYY')
  );
end;
/


FOR LOOP
========
--here below example, i will be initialized by the FOR loop to the first value and loop till 5 and print in the console.

BEGIN
  FOR i IN 1..5
  loop
    dbms_output.put_line(i);
  END loop;
END;
/


FOR -SKIP LOOPING
==================
--- modulus is good at some extend for the skiping the statements

for loop with SKIP.sql
DECLARE
  v_increment NUMBER := 3;
BEGIN
  FOR I IN 1..10
  LOOP
    IF mod(i,v_increment) != 0
    THEN
      CONTINUE;
    END IF;

    dbms_output.put_line(i);

  END LOOP;
END;
/


FOR -REVERSE LOOPING
====================
for loop REVERSE.sql
DECLARE
  v_increment NUMBER := 3;
BEGIN

  FOR I IN REVERSE 1..10
  LOOP
    IF mod(i,v_increment) != 0
    THEN
      CONTINUE;
    END IF;

    dbms_output.put_line(i);
  END LOOP;
END;
/




