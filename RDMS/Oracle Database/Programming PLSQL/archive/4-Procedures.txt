Procedures
==========
--Changing the AB to a procedures
--- Now this procedures are stored in the DB in the Data Dictionaries
--changing the logit with parameter.sql to a logit procedure with parameters

logit procedure.sql
CREATE OR REPLACE procedure logit
AS 
  v_message CONSTANT VARCHAR2(100) := 'Hello World!';
  v_date DATE := SYSDATE;
BEGIN
  DBMS_OUTPUT.put_line(
        v_message ||
        ' The date and time is ' ||
        to_char(v_date, 'Day') || ' on ' ||
        to_char(v_date, 'FMDD Month, YYYY') ||
        ' @ ' ||
        to_char(v_date, 'HH24:MI:SS')
        );
END;
/

-call the logit procedures
call logit.sql
begin
  logit;
end;

Turning a Variable into a Parameter
===================================
--parameter do end with semicolon
--Define the mode of the parameter, constant cannot be.
--parameter do not have any assignment statemetn
--parameter may contain a default value

logit with parameter.sql
create or replace
PROCEDURE logit(
  v_message IN VARCHAR2 DEFAULT 'Hello World!')
AS
  v_date DATE := SYSDATE;
BEGIN
  DBMS_OUTPUT.put_line(
        v_message ||
        ' The date and time is ' ||
        to_char(v_date, 'Day') || ' on ' ||
        to_char(v_date, 'FMDD Month, YYYY') ||
        ' @ ' ||
        to_char(v_date, 'HH24:MI:SS')
        );
END;
/

-call the logit procedures
call logit.sql
begin
  logit;
end;

Nested Procedures calls
=========================
nested logit calls.sql
BEGIN
  logit;
  logit(2);
  BEGIN
    logit( 'Hello again!');
    DECLARE
      v_a_different_msg VARCHAR2(100);
    BEGIN
      v_a_different_msg := 'Where am I?';
      logit( v_a_different_msg );
    END;
  END;
END;
/
